<?php
/**
 * ServerAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * traccar
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ServerAttributes Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServerAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Server_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stripepk' => 'string',
        'stripepklive' => 'string',
        'stripeurllocalhost' => 'string',
        'tracurl' => 'string',
        'tractoken' => 'string',
        'tracapi' => 'string',
        'stripeurl' => 'string',
        'apple_merchant_id' => 'string',
        'b_enable_mockup_gps' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stripepk' => null,
        'stripepklive' => null,
        'stripeurllocalhost' => null,
        'tracurl' => null,
        'tractoken' => null,
        'tracapi' => null,
        'stripeurl' => null,
        'apple_merchant_id' => null,
        'b_enable_mockup_gps' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stripepk' => 'stripepk',
        'stripepklive' => 'stripepklive',
        'stripeurllocalhost' => 'stripeurllocalhost',
        'tracurl' => 'tracurl',
        'tractoken' => 'tractoken',
        'tracapi' => 'tracapi',
        'stripeurl' => 'stripeurl',
        'apple_merchant_id' => 'appleMerchantID',
        'b_enable_mockup_gps' => 'bEnableMockupGPS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stripepk' => 'setStripepk',
        'stripepklive' => 'setStripepklive',
        'stripeurllocalhost' => 'setStripeurllocalhost',
        'tracurl' => 'setTracurl',
        'tractoken' => 'setTractoken',
        'tracapi' => 'setTracapi',
        'stripeurl' => 'setStripeurl',
        'apple_merchant_id' => 'setAppleMerchantId',
        'b_enable_mockup_gps' => 'setBEnableMockupGps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stripepk' => 'getStripepk',
        'stripepklive' => 'getStripepklive',
        'stripeurllocalhost' => 'getStripeurllocalhost',
        'tracurl' => 'getTracurl',
        'tractoken' => 'getTractoken',
        'tracapi' => 'getTracapi',
        'stripeurl' => 'getStripeurl',
        'apple_merchant_id' => 'getAppleMerchantId',
        'b_enable_mockup_gps' => 'getBEnableMockupGps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stripepk'] = isset($data['stripepk']) ? $data['stripepk'] : null;
        $this->container['stripepklive'] = isset($data['stripepklive']) ? $data['stripepklive'] : null;
        $this->container['stripeurllocalhost'] = isset($data['stripeurllocalhost']) ? $data['stripeurllocalhost'] : null;
        $this->container['tracurl'] = isset($data['tracurl']) ? $data['tracurl'] : null;
        $this->container['tractoken'] = isset($data['tractoken']) ? $data['tractoken'] : null;
        $this->container['tracapi'] = isset($data['tracapi']) ? $data['tracapi'] : null;
        $this->container['stripeurl'] = isset($data['stripeurl']) ? $data['stripeurl'] : null;
        $this->container['apple_merchant_id'] = isset($data['apple_merchant_id']) ? $data['apple_merchant_id'] : null;
        $this->container['b_enable_mockup_gps'] = isset($data['b_enable_mockup_gps']) ? $data['b_enable_mockup_gps'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stripepk
     *
     * @return string
     */
    public function getStripepk()
    {
        return $this->container['stripepk'];
    }

    /**
     * Sets stripepk
     *
     * @param string $stripepk stripepk
     *
     * @return $this
     */
    public function setStripepk($stripepk)
    {
        $this->container['stripepk'] = $stripepk;

        return $this;
    }

    /**
     * Gets stripepklive
     *
     * @return string
     */
    public function getStripepklive()
    {
        return $this->container['stripepklive'];
    }

    /**
     * Sets stripepklive
     *
     * @param string $stripepklive stripepklive
     *
     * @return $this
     */
    public function setStripepklive($stripepklive)
    {
        $this->container['stripepklive'] = $stripepklive;

        return $this;
    }

    /**
     * Gets stripeurllocalhost
     *
     * @return string
     */
    public function getStripeurllocalhost()
    {
        return $this->container['stripeurllocalhost'];
    }

    /**
     * Sets stripeurllocalhost
     *
     * @param string $stripeurllocalhost stripeurllocalhost
     *
     * @return $this
     */
    public function setStripeurllocalhost($stripeurllocalhost)
    {
        $this->container['stripeurllocalhost'] = $stripeurllocalhost;

        return $this;
    }

    /**
     * Gets tracurl
     *
     * @return string
     */
    public function getTracurl()
    {
        return $this->container['tracurl'];
    }

    /**
     * Sets tracurl
     *
     * @param string $tracurl tracurl
     *
     * @return $this
     */
    public function setTracurl($tracurl)
    {
        $this->container['tracurl'] = $tracurl;

        return $this;
    }

    /**
     * Gets tractoken
     *
     * @return string
     */
    public function getTractoken()
    {
        return $this->container['tractoken'];
    }

    /**
     * Sets tractoken
     *
     * @param string $tractoken tractoken
     *
     * @return $this
     */
    public function setTractoken($tractoken)
    {
        $this->container['tractoken'] = $tractoken;

        return $this;
    }

    /**
     * Gets tracapi
     *
     * @return string
     */
    public function getTracapi()
    {
        return $this->container['tracapi'];
    }

    /**
     * Sets tracapi
     *
     * @param string $tracapi tracapi
     *
     * @return $this
     */
    public function setTracapi($tracapi)
    {
        $this->container['tracapi'] = $tracapi;

        return $this;
    }

    /**
     * Gets stripeurl
     *
     * @return string
     */
    public function getStripeurl()
    {
        return $this->container['stripeurl'];
    }

    /**
     * Sets stripeurl
     *
     * @param string $stripeurl stripeurl
     *
     * @return $this
     */
    public function setStripeurl($stripeurl)
    {
        $this->container['stripeurl'] = $stripeurl;

        return $this;
    }

    /**
     * Gets apple_merchant_id
     *
     * @return string
     */
    public function getAppleMerchantId()
    {
        return $this->container['apple_merchant_id'];
    }

    /**
     * Sets apple_merchant_id
     *
     * @param string $apple_merchant_id apple_merchant_id
     *
     * @return $this
     */
    public function setAppleMerchantId($apple_merchant_id)
    {
        $this->container['apple_merchant_id'] = $apple_merchant_id;

        return $this;
    }

    /**
     * Gets b_enable_mockup_gps
     *
     * @return string
     */
    public function getBEnableMockupGps()
    {
        return $this->container['b_enable_mockup_gps'];
    }

    /**
     * Sets b_enable_mockup_gps
     *
     * @param string $b_enable_mockup_gps b_enable_mockup_gps
     *
     * @return $this
     */
    public function setBEnableMockupGps($b_enable_mockup_gps)
    {
        $this->container['b_enable_mockup_gps'] = $b_enable_mockup_gps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


