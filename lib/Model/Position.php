<?php
/**
 * Position
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * traccar
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Position Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Position implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Position';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'device_id' => 'int',
        'protocol' => 'string',
        'device_time' => '\DateTime',
        'fix_time' => '\DateTime',
        'server_time' => '\DateTime',
        'outdated' => 'bool',
        'valid' => 'bool',
        'latitude' => 'float',
        'longitude' => 'float',
        'altitude' => 'float',
        'speed' => 'float',
        'course' => 'float',
        'address' => 'string',
        'accuracy' => 'float',
        'network' => '\Swagger\Client\Model\Network',
        'additional_properties' => 'string',
        'position_type' => 'string',
        'motion' => 'bool',
        'rented' => 'int',
        'battery_level' => 'float',
        'distance' => 'float',
        'total_distance' => 'float',
        'ip' => 'string',
        'qr' => 'string',
        'battery' => 'int',
        'ride_start' => '\DateTime',
        'attributes' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'device_id' => null,
        'protocol' => null,
        'device_time' => 'date-time',
        'fix_time' => 'date-time',
        'server_time' => 'date-time',
        'outdated' => null,
        'valid' => null,
        'latitude' => null,
        'longitude' => null,
        'altitude' => null,
        'speed' => null,
        'course' => null,
        'address' => null,
        'accuracy' => null,
        'network' => null,
        'additional_properties' => null,
        'position_type' => null,
        'motion' => null,
        'rented' => null,
        'battery_level' => null,
        'distance' => null,
        'total_distance' => null,
        'ip' => null,
        'qr' => null,
        'battery' => null,
        'ride_start' => 'date-time',
        'attributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'device_id' => 'deviceId',
        'protocol' => 'protocol',
        'device_time' => 'deviceTime',
        'fix_time' => 'fixTime',
        'server_time' => 'serverTime',
        'outdated' => 'outdated',
        'valid' => 'valid',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'altitude' => 'altitude',
        'speed' => 'speed',
        'course' => 'course',
        'address' => 'address',
        'accuracy' => 'accuracy',
        'network' => 'network',
        'additional_properties' => 'additionalProperties',
        'position_type' => 'positionType',
        'motion' => 'motion',
        'rented' => 'rented',
        'battery_level' => 'batteryLevel',
        'distance' => 'distance',
        'total_distance' => 'totalDistance',
        'ip' => 'ip',
        'qr' => 'qr',
        'battery' => 'battery',
        'ride_start' => 'ride_start',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'device_id' => 'setDeviceId',
        'protocol' => 'setProtocol',
        'device_time' => 'setDeviceTime',
        'fix_time' => 'setFixTime',
        'server_time' => 'setServerTime',
        'outdated' => 'setOutdated',
        'valid' => 'setValid',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'altitude' => 'setAltitude',
        'speed' => 'setSpeed',
        'course' => 'setCourse',
        'address' => 'setAddress',
        'accuracy' => 'setAccuracy',
        'network' => 'setNetwork',
        'additional_properties' => 'setAdditionalProperties',
        'position_type' => 'setPositionType',
        'motion' => 'setMotion',
        'rented' => 'setRented',
        'battery_level' => 'setBatteryLevel',
        'distance' => 'setDistance',
        'total_distance' => 'setTotalDistance',
        'ip' => 'setIp',
        'qr' => 'setQr',
        'battery' => 'setBattery',
        'ride_start' => 'setRideStart',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'device_id' => 'getDeviceId',
        'protocol' => 'getProtocol',
        'device_time' => 'getDeviceTime',
        'fix_time' => 'getFixTime',
        'server_time' => 'getServerTime',
        'outdated' => 'getOutdated',
        'valid' => 'getValid',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'altitude' => 'getAltitude',
        'speed' => 'getSpeed',
        'course' => 'getCourse',
        'address' => 'getAddress',
        'accuracy' => 'getAccuracy',
        'network' => 'getNetwork',
        'additional_properties' => 'getAdditionalProperties',
        'position_type' => 'getPositionType',
        'motion' => 'getMotion',
        'rented' => 'getRented',
        'battery_level' => 'getBatteryLevel',
        'distance' => 'getDistance',
        'total_distance' => 'getTotalDistance',
        'ip' => 'getIp',
        'qr' => 'getQr',
        'battery' => 'getBattery',
        'ride_start' => 'getRideStart',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['device_time'] = isset($data['device_time']) ? $data['device_time'] : null;
        $this->container['fix_time'] = isset($data['fix_time']) ? $data['fix_time'] : null;
        $this->container['server_time'] = isset($data['server_time']) ? $data['server_time'] : null;
        $this->container['outdated'] = isset($data['outdated']) ? $data['outdated'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['altitude'] = isset($data['altitude']) ? $data['altitude'] : null;
        $this->container['speed'] = isset($data['speed']) ? $data['speed'] : null;
        $this->container['course'] = isset($data['course']) ? $data['course'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['accuracy'] = isset($data['accuracy']) ? $data['accuracy'] : null;
        $this->container['network'] = isset($data['network']) ? $data['network'] : null;
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
        $this->container['position_type'] = isset($data['position_type']) ? $data['position_type'] : null;
        $this->container['motion'] = isset($data['motion']) ? $data['motion'] : null;
        $this->container['rented'] = isset($data['rented']) ? $data['rented'] : null;
        $this->container['battery_level'] = isset($data['battery_level']) ? $data['battery_level'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['total_distance'] = isset($data['total_distance']) ? $data['total_distance'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['qr'] = isset($data['qr']) ? $data['qr'] : null;
        $this->container['battery'] = isset($data['battery']) ? $data['battery'] : null;
        $this->container['ride_start'] = isset($data['ride_start']) ? $data['ride_start'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return int
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param int $device_id device_id
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets device_time
     *
     * @return \DateTime
     */
    public function getDeviceTime()
    {
        return $this->container['device_time'];
    }

    /**
     * Sets device_time
     *
     * @param \DateTime $device_time in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     *
     * @return $this
     */
    public function setDeviceTime($device_time)
    {
        $this->container['device_time'] = $device_time;

        return $this;
    }

    /**
     * Gets fix_time
     *
     * @return \DateTime
     */
    public function getFixTime()
    {
        return $this->container['fix_time'];
    }

    /**
     * Sets fix_time
     *
     * @param \DateTime $fix_time in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     *
     * @return $this
     */
    public function setFixTime($fix_time)
    {
        $this->container['fix_time'] = $fix_time;

        return $this;
    }

    /**
     * Gets server_time
     *
     * @return \DateTime
     */
    public function getServerTime()
    {
        return $this->container['server_time'];
    }

    /**
     * Sets server_time
     *
     * @param \DateTime $server_time in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     *
     * @return $this
     */
    public function setServerTime($server_time)
    {
        $this->container['server_time'] = $server_time;

        return $this;
    }

    /**
     * Gets outdated
     *
     * @return bool
     */
    public function getOutdated()
    {
        return $this->container['outdated'];
    }

    /**
     * Sets outdated
     *
     * @param bool $outdated outdated
     *
     * @return $this
     */
    public function setOutdated($outdated)
    {
        $this->container['outdated'] = $outdated;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid valid
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets altitude
     *
     * @return float
     */
    public function getAltitude()
    {
        return $this->container['altitude'];
    }

    /**
     * Sets altitude
     *
     * @param float $altitude altitude
     *
     * @return $this
     */
    public function setAltitude($altitude)
    {
        $this->container['altitude'] = $altitude;

        return $this;
    }

    /**
     * Gets speed
     *
     * @return float
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     *
     * @param float $speed in knots
     *
     * @return $this
     */
    public function setSpeed($speed)
    {
        $this->container['speed'] = $speed;

        return $this;
    }

    /**
     * Gets course
     *
     * @return float
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param float $course course
     *
     * @return $this
     */
    public function setCourse($course)
    {
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets accuracy
     *
     * @return float
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param float $accuracy accuracy
     *
     * @return $this
     */
    public function setAccuracy($accuracy)
    {
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \Swagger\Client\Model\Network
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Swagger\Client\Model\Network $network network
     *
     * @return $this
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets additional_properties
     *
     * @return string
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     *
     * @param string $additional_properties additional_properties
     *
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets position_type
     *
     * @return string
     */
    public function getPositionType()
    {
        return $this->container['position_type'];
    }

    /**
     * Sets position_type
     *
     * @param string $position_type position_type
     *
     * @return $this
     */
    public function setPositionType($position_type)
    {
        $this->container['position_type'] = $position_type;

        return $this;
    }

    /**
     * Gets motion
     *
     * @return bool
     */
    public function getMotion()
    {
        return $this->container['motion'];
    }

    /**
     * Sets motion
     *
     * @param bool $motion motion
     *
     * @return $this
     */
    public function setMotion($motion)
    {
        $this->container['motion'] = $motion;

        return $this;
    }

    /**
     * Gets rented
     *
     * @return int
     */
    public function getRented()
    {
        return $this->container['rented'];
    }

    /**
     * Sets rented
     *
     * @param int $rented rented
     *
     * @return $this
     */
    public function setRented($rented)
    {
        $this->container['rented'] = $rented;

        return $this;
    }

    /**
     * Gets battery_level
     *
     * @return float
     */
    public function getBatteryLevel()
    {
        return $this->container['battery_level'];
    }

    /**
     * Sets battery_level
     *
     * @param float $battery_level battery_level
     *
     * @return $this
     */
    public function setBatteryLevel($battery_level)
    {
        $this->container['battery_level'] = $battery_level;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets total_distance
     *
     * @return float
     */
    public function getTotalDistance()
    {
        return $this->container['total_distance'];
    }

    /**
     * Sets total_distance
     *
     * @param float $total_distance total_distance
     *
     * @return $this
     */
    public function setTotalDistance($total_distance)
    {
        $this->container['total_distance'] = $total_distance;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets qr
     *
     * @return string
     */
    public function getQr()
    {
        return $this->container['qr'];
    }

    /**
     * Sets qr
     *
     * @param string $qr qr
     *
     * @return $this
     */
    public function setQr($qr)
    {
        $this->container['qr'] = $qr;

        return $this;
    }

    /**
     * Gets battery
     *
     * @return int
     */
    public function getBattery()
    {
        return $this->container['battery'];
    }

    /**
     * Sets battery
     *
     * @param int $battery battery
     *
     * @return $this
     */
    public function setBattery($battery)
    {
        $this->container['battery'] = $battery;

        return $this;
    }

    /**
     * Gets ride_start
     *
     * @return \DateTime
     */
    public function getRideStart()
    {
        return $this->container['ride_start'];
    }

    /**
     * Sets ride_start
     *
     * @param \DateTime $ride_start ride_start
     *
     * @return $this
     */
    public function setRideStart($ride_start)
    {
        $this->container['ride_start'] = $ride_start;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return map[string,string]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param map[string,string] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


