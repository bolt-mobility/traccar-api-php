<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * traccar
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class User implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'email' => 'string',
        'readonly' => 'bool',
        'admin' => 'bool',
        'map' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'zoom' => 'int',
        'password' => 'string',
        'twelve_hour_format' => 'bool',
        'coordinate_format' => 'string',
        'disabled' => 'bool',
        'expiration_time' => '\DateTime',
        'device_limit' => 'int',
        'user_limit' => 'int',
        'device_readonly' => 'bool',
        'limit_commands' => 'bool',
        'token' => 'string',
        'attributes' => 'map[string,string]',
        'phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'email' => null,
        'readonly' => null,
        'admin' => null,
        'map' => null,
        'latitude' => null,
        'longitude' => null,
        'zoom' => null,
        'password' => null,
        'twelve_hour_format' => null,
        'coordinate_format' => null,
        'disabled' => null,
        'expiration_time' => 'date-time',
        'device_limit' => null,
        'user_limit' => null,
        'device_readonly' => null,
        'limit_commands' => null,
        'token' => null,
        'attributes' => null,
        'phone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'email' => 'email',
        'readonly' => 'readonly',
        'admin' => 'admin',
        'map' => 'map',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'zoom' => 'zoom',
        'password' => 'password',
        'twelve_hour_format' => 'twelveHourFormat',
        'coordinate_format' => 'coordinateFormat',
        'disabled' => 'disabled',
        'expiration_time' => 'expirationTime',
        'device_limit' => 'deviceLimit',
        'user_limit' => 'userLimit',
        'device_readonly' => 'deviceReadonly',
        'limit_commands' => 'limitCommands',
        'token' => 'token',
        'attributes' => 'attributes',
        'phone' => 'phone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'email' => 'setEmail',
        'readonly' => 'setReadonly',
        'admin' => 'setAdmin',
        'map' => 'setMap',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'zoom' => 'setZoom',
        'password' => 'setPassword',
        'twelve_hour_format' => 'setTwelveHourFormat',
        'coordinate_format' => 'setCoordinateFormat',
        'disabled' => 'setDisabled',
        'expiration_time' => 'setExpirationTime',
        'device_limit' => 'setDeviceLimit',
        'user_limit' => 'setUserLimit',
        'device_readonly' => 'setDeviceReadonly',
        'limit_commands' => 'setLimitCommands',
        'token' => 'setToken',
        'attributes' => 'setAttributes',
        'phone' => 'setPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'email' => 'getEmail',
        'readonly' => 'getReadonly',
        'admin' => 'getAdmin',
        'map' => 'getMap',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'zoom' => 'getZoom',
        'password' => 'getPassword',
        'twelve_hour_format' => 'getTwelveHourFormat',
        'coordinate_format' => 'getCoordinateFormat',
        'disabled' => 'getDisabled',
        'expiration_time' => 'getExpirationTime',
        'device_limit' => 'getDeviceLimit',
        'user_limit' => 'getUserLimit',
        'device_readonly' => 'getDeviceReadonly',
        'limit_commands' => 'getLimitCommands',
        'token' => 'getToken',
        'attributes' => 'getAttributes',
        'phone' => 'getPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['readonly'] = isset($data['readonly']) ? $data['readonly'] : null;
        $this->container['admin'] = isset($data['admin']) ? $data['admin'] : null;
        $this->container['map'] = isset($data['map']) ? $data['map'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['zoom'] = isset($data['zoom']) ? $data['zoom'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['twelve_hour_format'] = isset($data['twelve_hour_format']) ? $data['twelve_hour_format'] : null;
        $this->container['coordinate_format'] = isset($data['coordinate_format']) ? $data['coordinate_format'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['expiration_time'] = isset($data['expiration_time']) ? $data['expiration_time'] : null;
        $this->container['device_limit'] = isset($data['device_limit']) ? $data['device_limit'] : null;
        $this->container['user_limit'] = isset($data['user_limit']) ? $data['user_limit'] : null;
        $this->container['device_readonly'] = isset($data['device_readonly']) ? $data['device_readonly'] : null;
        $this->container['limit_commands'] = isset($data['limit_commands']) ? $data['limit_commands'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool $readonly readonly
     *
     * @return $this
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return bool
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param bool $admin admin
     *
     * @return $this
     */
    public function setAdmin($admin)
    {
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets map
     *
     * @return string
     */
    public function getMap()
    {
        return $this->container['map'];
    }

    /**
     * Sets map
     *
     * @param string $map map
     *
     * @return $this
     */
    public function setMap($map)
    {
        $this->container['map'] = $map;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets zoom
     *
     * @return int
     */
    public function getZoom()
    {
        return $this->container['zoom'];
    }

    /**
     * Sets zoom
     *
     * @param int $zoom zoom
     *
     * @return $this
     */
    public function setZoom($zoom)
    {
        $this->container['zoom'] = $zoom;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets twelve_hour_format
     *
     * @return bool
     */
    public function getTwelveHourFormat()
    {
        return $this->container['twelve_hour_format'];
    }

    /**
     * Sets twelve_hour_format
     *
     * @param bool $twelve_hour_format twelve_hour_format
     *
     * @return $this
     */
    public function setTwelveHourFormat($twelve_hour_format)
    {
        $this->container['twelve_hour_format'] = $twelve_hour_format;

        return $this;
    }

    /**
     * Gets coordinate_format
     *
     * @return string
     */
    public function getCoordinateFormat()
    {
        return $this->container['coordinate_format'];
    }

    /**
     * Sets coordinate_format
     *
     * @param string $coordinate_format coordinate_format
     *
     * @return $this
     */
    public function setCoordinateFormat($coordinate_format)
    {
        $this->container['coordinate_format'] = $coordinate_format;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets expiration_time
     *
     * @return \DateTime
     */
    public function getExpirationTime()
    {
        return $this->container['expiration_time'];
    }

    /**
     * Sets expiration_time
     *
     * @param \DateTime $expiration_time in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     *
     * @return $this
     */
    public function setExpirationTime($expiration_time)
    {
        $this->container['expiration_time'] = $expiration_time;

        return $this;
    }

    /**
     * Gets device_limit
     *
     * @return int
     */
    public function getDeviceLimit()
    {
        return $this->container['device_limit'];
    }

    /**
     * Sets device_limit
     *
     * @param int $device_limit device_limit
     *
     * @return $this
     */
    public function setDeviceLimit($device_limit)
    {
        $this->container['device_limit'] = $device_limit;

        return $this;
    }

    /**
     * Gets user_limit
     *
     * @return int
     */
    public function getUserLimit()
    {
        return $this->container['user_limit'];
    }

    /**
     * Sets user_limit
     *
     * @param int $user_limit user_limit
     *
     * @return $this
     */
    public function setUserLimit($user_limit)
    {
        $this->container['user_limit'] = $user_limit;

        return $this;
    }

    /**
     * Gets device_readonly
     *
     * @return bool
     */
    public function getDeviceReadonly()
    {
        return $this->container['device_readonly'];
    }

    /**
     * Sets device_readonly
     *
     * @param bool $device_readonly device_readonly
     *
     * @return $this
     */
    public function setDeviceReadonly($device_readonly)
    {
        $this->container['device_readonly'] = $device_readonly;

        return $this;
    }

    /**
     * Gets limit_commands
     *
     * @return bool
     */
    public function getLimitCommands()
    {
        return $this->container['limit_commands'];
    }

    /**
     * Sets limit_commands
     *
     * @param bool $limit_commands limit_commands
     *
     * @return $this
     */
    public function setLimitCommands($limit_commands)
    {
        $this->container['limit_commands'] = $limit_commands;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return map[string,string]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param map[string,string] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


