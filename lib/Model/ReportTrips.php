<?php
/**
 * ReportTrips
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * traccar
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReportTrips Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportTrips implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportTrips';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'device_id' => 'int',
        'device_name' => 'string',
        'max_speed' => 'float',
        'average_speed' => 'float',
        'distance' => 'float',
        'spent_fuel' => 'float',
        'duration' => 'int',
        'start_time' => '\DateTime',
        'start_address' => 'string',
        'start_lat' => 'float',
        'start_lon' => 'float',
        'end_time' => '\DateTime',
        'end_address' => 'string',
        'end_lat' => 'float',
        'end_lon' => 'float',
        'driver_unique_id' => 'int',
        'driver_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'device_id' => null,
        'device_name' => null,
        'max_speed' => null,
        'average_speed' => null,
        'distance' => null,
        'spent_fuel' => null,
        'duration' => null,
        'start_time' => 'date-time',
        'start_address' => null,
        'start_lat' => null,
        'start_lon' => null,
        'end_time' => 'date-time',
        'end_address' => null,
        'end_lat' => null,
        'end_lon' => null,
        'driver_unique_id' => null,
        'driver_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device_id' => 'deviceId',
        'device_name' => 'deviceName',
        'max_speed' => 'maxSpeed',
        'average_speed' => 'averageSpeed',
        'distance' => 'distance',
        'spent_fuel' => 'spentFuel',
        'duration' => 'duration',
        'start_time' => 'startTime',
        'start_address' => 'startAddress',
        'start_lat' => 'startLat',
        'start_lon' => 'startLon',
        'end_time' => 'endTime',
        'end_address' => 'endAddress',
        'end_lat' => 'endLat',
        'end_lon' => 'endLon',
        'driver_unique_id' => 'driverUniqueId',
        'driver_name' => 'driverName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device_id' => 'setDeviceId',
        'device_name' => 'setDeviceName',
        'max_speed' => 'setMaxSpeed',
        'average_speed' => 'setAverageSpeed',
        'distance' => 'setDistance',
        'spent_fuel' => 'setSpentFuel',
        'duration' => 'setDuration',
        'start_time' => 'setStartTime',
        'start_address' => 'setStartAddress',
        'start_lat' => 'setStartLat',
        'start_lon' => 'setStartLon',
        'end_time' => 'setEndTime',
        'end_address' => 'setEndAddress',
        'end_lat' => 'setEndLat',
        'end_lon' => 'setEndLon',
        'driver_unique_id' => 'setDriverUniqueId',
        'driver_name' => 'setDriverName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device_id' => 'getDeviceId',
        'device_name' => 'getDeviceName',
        'max_speed' => 'getMaxSpeed',
        'average_speed' => 'getAverageSpeed',
        'distance' => 'getDistance',
        'spent_fuel' => 'getSpentFuel',
        'duration' => 'getDuration',
        'start_time' => 'getStartTime',
        'start_address' => 'getStartAddress',
        'start_lat' => 'getStartLat',
        'start_lon' => 'getStartLon',
        'end_time' => 'getEndTime',
        'end_address' => 'getEndAddress',
        'end_lat' => 'getEndLat',
        'end_lon' => 'getEndLon',
        'driver_unique_id' => 'getDriverUniqueId',
        'driver_name' => 'getDriverName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['device_name'] = isset($data['device_name']) ? $data['device_name'] : null;
        $this->container['max_speed'] = isset($data['max_speed']) ? $data['max_speed'] : null;
        $this->container['average_speed'] = isset($data['average_speed']) ? $data['average_speed'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['spent_fuel'] = isset($data['spent_fuel']) ? $data['spent_fuel'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['start_address'] = isset($data['start_address']) ? $data['start_address'] : null;
        $this->container['start_lat'] = isset($data['start_lat']) ? $data['start_lat'] : null;
        $this->container['start_lon'] = isset($data['start_lon']) ? $data['start_lon'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['end_address'] = isset($data['end_address']) ? $data['end_address'] : null;
        $this->container['end_lat'] = isset($data['end_lat']) ? $data['end_lat'] : null;
        $this->container['end_lon'] = isset($data['end_lon']) ? $data['end_lon'] : null;
        $this->container['driver_unique_id'] = isset($data['driver_unique_id']) ? $data['driver_unique_id'] : null;
        $this->container['driver_name'] = isset($data['driver_name']) ? $data['driver_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets device_id
     *
     * @return int
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param int $device_id device_id
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string $device_name device_name
     *
     * @return $this
     */
    public function setDeviceName($device_name)
    {
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets max_speed
     *
     * @return float
     */
    public function getMaxSpeed()
    {
        return $this->container['max_speed'];
    }

    /**
     * Sets max_speed
     *
     * @param float $max_speed in knots
     *
     * @return $this
     */
    public function setMaxSpeed($max_speed)
    {
        $this->container['max_speed'] = $max_speed;

        return $this;
    }

    /**
     * Gets average_speed
     *
     * @return float
     */
    public function getAverageSpeed()
    {
        return $this->container['average_speed'];
    }

    /**
     * Sets average_speed
     *
     * @param float $average_speed in knots
     *
     * @return $this
     */
    public function setAverageSpeed($average_speed)
    {
        $this->container['average_speed'] = $average_speed;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance in meters
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets spent_fuel
     *
     * @return float
     */
    public function getSpentFuel()
    {
        return $this->container['spent_fuel'];
    }

    /**
     * Sets spent_fuel
     *
     * @param float $spent_fuel in liters
     *
     * @return $this
     */
    public function setSpentFuel($spent_fuel)
    {
        $this->container['spent_fuel'] = $spent_fuel;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets start_address
     *
     * @return string
     */
    public function getStartAddress()
    {
        return $this->container['start_address'];
    }

    /**
     * Sets start_address
     *
     * @param string $start_address start_address
     *
     * @return $this
     */
    public function setStartAddress($start_address)
    {
        $this->container['start_address'] = $start_address;

        return $this;
    }

    /**
     * Gets start_lat
     *
     * @return float
     */
    public function getStartLat()
    {
        return $this->container['start_lat'];
    }

    /**
     * Sets start_lat
     *
     * @param float $start_lat start_lat
     *
     * @return $this
     */
    public function setStartLat($start_lat)
    {
        $this->container['start_lat'] = $start_lat;

        return $this;
    }

    /**
     * Gets start_lon
     *
     * @return float
     */
    public function getStartLon()
    {
        return $this->container['start_lon'];
    }

    /**
     * Sets start_lon
     *
     * @param float $start_lon start_lon
     *
     * @return $this
     */
    public function setStartLon($start_lon)
    {
        $this->container['start_lon'] = $start_lon;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime $end_time in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets end_address
     *
     * @return string
     */
    public function getEndAddress()
    {
        return $this->container['end_address'];
    }

    /**
     * Sets end_address
     *
     * @param string $end_address end_address
     *
     * @return $this
     */
    public function setEndAddress($end_address)
    {
        $this->container['end_address'] = $end_address;

        return $this;
    }

    /**
     * Gets end_lat
     *
     * @return float
     */
    public function getEndLat()
    {
        return $this->container['end_lat'];
    }

    /**
     * Sets end_lat
     *
     * @param float $end_lat end_lat
     *
     * @return $this
     */
    public function setEndLat($end_lat)
    {
        $this->container['end_lat'] = $end_lat;

        return $this;
    }

    /**
     * Gets end_lon
     *
     * @return float
     */
    public function getEndLon()
    {
        return $this->container['end_lon'];
    }

    /**
     * Sets end_lon
     *
     * @param float $end_lon end_lon
     *
     * @return $this
     */
    public function setEndLon($end_lon)
    {
        $this->container['end_lon'] = $end_lon;

        return $this;
    }

    /**
     * Gets driver_unique_id
     *
     * @return int
     */
    public function getDriverUniqueId()
    {
        return $this->container['driver_unique_id'];
    }

    /**
     * Sets driver_unique_id
     *
     * @param int $driver_unique_id driver_unique_id
     *
     * @return $this
     */
    public function setDriverUniqueId($driver_unique_id)
    {
        $this->container['driver_unique_id'] = $driver_unique_id;

        return $this;
    }

    /**
     * Gets driver_name
     *
     * @return string
     */
    public function getDriverName()
    {
        return $this->container['driver_name'];
    }

    /**
     * Sets driver_name
     *
     * @param string $driver_name driver_name
     *
     * @return $this
     */
    public function setDriverName($driver_name)
    {
        $this->container['driver_name'] = $driver_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


