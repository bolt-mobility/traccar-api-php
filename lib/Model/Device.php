<?php
/**
 * Device
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * traccar
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Device Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Device implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Device';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'unique_id' => 'string',
        'status' => 'string',
        'disabled' => 'bool',
        'last_update' => '\DateTime',
        'position_id' => 'int',
        'rented' => 'int',
        'battery_level' => 'float',
        'distance' => 'float',
        'total_distance' => 'float',
        'ip' => 'string',
        'qr' => 'string',
        'battery' => 'int',
        'group_id' => 'int',
        'phone' => 'string',
        'model' => 'string',
        'contact' => 'string',
        'category' => 'string',
        'geofence_ids' => 'int[]',
        'attributes' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'unique_id' => null,
        'status' => null,
        'disabled' => null,
        'last_update' => 'date-time',
        'position_id' => null,
        'rented' => null,
        'battery_level' => null,
        'distance' => null,
        'total_distance' => null,
        'ip' => null,
        'qr' => null,
        'battery' => null,
        'group_id' => null,
        'phone' => null,
        'model' => null,
        'contact' => null,
        'category' => null,
        'geofence_ids' => null,
        'attributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'unique_id' => 'uniqueId',
        'status' => 'status',
        'disabled' => 'disabled',
        'last_update' => 'lastUpdate',
        'position_id' => 'positionId',
        'rented' => 'rented',
        'battery_level' => 'batteryLevel',
        'distance' => 'distance',
        'total_distance' => 'totalDistance',
        'ip' => 'ip',
        'qr' => 'qr',
        'battery' => 'battery',
        'group_id' => 'groupId',
        'phone' => 'phone',
        'model' => 'model',
        'contact' => 'contact',
        'category' => 'category',
        'geofence_ids' => 'geofenceIds',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'unique_id' => 'setUniqueId',
        'status' => 'setStatus',
        'disabled' => 'setDisabled',
        'last_update' => 'setLastUpdate',
        'position_id' => 'setPositionId',
        'rented' => 'setRented',
        'battery_level' => 'setBatteryLevel',
        'distance' => 'setDistance',
        'total_distance' => 'setTotalDistance',
        'ip' => 'setIp',
        'qr' => 'setQr',
        'battery' => 'setBattery',
        'group_id' => 'setGroupId',
        'phone' => 'setPhone',
        'model' => 'setModel',
        'contact' => 'setContact',
        'category' => 'setCategory',
        'geofence_ids' => 'setGeofenceIds',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'unique_id' => 'getUniqueId',
        'status' => 'getStatus',
        'disabled' => 'getDisabled',
        'last_update' => 'getLastUpdate',
        'position_id' => 'getPositionId',
        'rented' => 'getRented',
        'battery_level' => 'getBatteryLevel',
        'distance' => 'getDistance',
        'total_distance' => 'getTotalDistance',
        'ip' => 'getIp',
        'qr' => 'getQr',
        'battery' => 'getBattery',
        'group_id' => 'getGroupId',
        'phone' => 'getPhone',
        'model' => 'getModel',
        'contact' => 'getContact',
        'category' => 'getCategory',
        'geofence_ids' => 'getGeofenceIds',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['unique_id'] = isset($data['unique_id']) ? $data['unique_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['position_id'] = isset($data['position_id']) ? $data['position_id'] : null;
        $this->container['rented'] = isset($data['rented']) ? $data['rented'] : null;
        $this->container['battery_level'] = isset($data['battery_level']) ? $data['battery_level'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['total_distance'] = isset($data['total_distance']) ? $data['total_distance'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['qr'] = isset($data['qr']) ? $data['qr'] : null;
        $this->container['battery'] = isset($data['battery']) ? $data['battery'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['geofence_ids'] = isset($data['geofence_ids']) ? $data['geofence_ids'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string $unique_id unique_id
     *
     * @return $this
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime $last_update in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     *
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets position_id
     *
     * @return int
     */
    public function getPositionId()
    {
        return $this->container['position_id'];
    }

    /**
     * Sets position_id
     *
     * @param int $position_id position_id
     *
     * @return $this
     */
    public function setPositionId($position_id)
    {
        $this->container['position_id'] = $position_id;

        return $this;
    }

    /**
     * Gets rented
     *
     * @return int
     */
    public function getRented()
    {
        return $this->container['rented'];
    }

    /**
     * Sets rented
     *
     * @param int $rented rented
     *
     * @return $this
     */
    public function setRented($rented)
    {
        $this->container['rented'] = $rented;

        return $this;
    }

    /**
     * Gets battery_level
     *
     * @return float
     */
    public function getBatteryLevel()
    {
        return $this->container['battery_level'];
    }

    /**
     * Sets battery_level
     *
     * @param float $battery_level battery_level
     *
     * @return $this
     */
    public function setBatteryLevel($battery_level)
    {
        $this->container['battery_level'] = $battery_level;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets total_distance
     *
     * @return float
     */
    public function getTotalDistance()
    {
        return $this->container['total_distance'];
    }

    /**
     * Sets total_distance
     *
     * @param float $total_distance total_distance
     *
     * @return $this
     */
    public function setTotalDistance($total_distance)
    {
        $this->container['total_distance'] = $total_distance;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets qr
     *
     * @return string
     */
    public function getQr()
    {
        return $this->container['qr'];
    }

    /**
     * Sets qr
     *
     * @param string $qr qr
     *
     * @return $this
     */
    public function setQr($qr)
    {
        $this->container['qr'] = $qr;

        return $this;
    }

    /**
     * Gets battery
     *
     * @return int
     */
    public function getBattery()
    {
        return $this->container['battery'];
    }

    /**
     * Sets battery
     *
     * @param int $battery battery
     *
     * @return $this
     */
    public function setBattery($battery)
    {
        $this->container['battery'] = $battery;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return string
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param string $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets geofence_ids
     *
     * @return int[]
     */
    public function getGeofenceIds()
    {
        return $this->container['geofence_ids'];
    }

    /**
     * Sets geofence_ids
     *
     * @param int[] $geofence_ids geofence_ids
     *
     * @return $this
     */
    public function setGeofenceIds($geofence_ids)
    {
        $this->container['geofence_ids'] = $geofence_ids;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return map[string,string]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param map[string,string] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


