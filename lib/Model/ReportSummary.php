<?php
/**
 * ReportSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * traccar
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReportSummary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'device_id' => 'int',
        'device_name' => 'string',
        'max_speed' => 'float',
        'average_speed' => 'float',
        'distance' => 'float',
        'spent_fuel' => 'float',
        'engine_hours' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'device_id' => null,
        'device_name' => null,
        'max_speed' => null,
        'average_speed' => null,
        'distance' => null,
        'spent_fuel' => null,
        'engine_hours' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device_id' => 'deviceId',
        'device_name' => 'deviceName',
        'max_speed' => 'maxSpeed',
        'average_speed' => 'averageSpeed',
        'distance' => 'distance',
        'spent_fuel' => 'spentFuel',
        'engine_hours' => 'engineHours'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device_id' => 'setDeviceId',
        'device_name' => 'setDeviceName',
        'max_speed' => 'setMaxSpeed',
        'average_speed' => 'setAverageSpeed',
        'distance' => 'setDistance',
        'spent_fuel' => 'setSpentFuel',
        'engine_hours' => 'setEngineHours'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device_id' => 'getDeviceId',
        'device_name' => 'getDeviceName',
        'max_speed' => 'getMaxSpeed',
        'average_speed' => 'getAverageSpeed',
        'distance' => 'getDistance',
        'spent_fuel' => 'getSpentFuel',
        'engine_hours' => 'getEngineHours'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['device_name'] = isset($data['device_name']) ? $data['device_name'] : null;
        $this->container['max_speed'] = isset($data['max_speed']) ? $data['max_speed'] : null;
        $this->container['average_speed'] = isset($data['average_speed']) ? $data['average_speed'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['spent_fuel'] = isset($data['spent_fuel']) ? $data['spent_fuel'] : null;
        $this->container['engine_hours'] = isset($data['engine_hours']) ? $data['engine_hours'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets device_id
     *
     * @return int
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param int $device_id device_id
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string $device_name device_name
     *
     * @return $this
     */
    public function setDeviceName($device_name)
    {
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets max_speed
     *
     * @return float
     */
    public function getMaxSpeed()
    {
        return $this->container['max_speed'];
    }

    /**
     * Sets max_speed
     *
     * @param float $max_speed in knots
     *
     * @return $this
     */
    public function setMaxSpeed($max_speed)
    {
        $this->container['max_speed'] = $max_speed;

        return $this;
    }

    /**
     * Gets average_speed
     *
     * @return float
     */
    public function getAverageSpeed()
    {
        return $this->container['average_speed'];
    }

    /**
     * Sets average_speed
     *
     * @param float $average_speed in knots
     *
     * @return $this
     */
    public function setAverageSpeed($average_speed)
    {
        $this->container['average_speed'] = $average_speed;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance in meters
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets spent_fuel
     *
     * @return float
     */
    public function getSpentFuel()
    {
        return $this->container['spent_fuel'];
    }

    /**
     * Sets spent_fuel
     *
     * @param float $spent_fuel in liters
     *
     * @return $this
     */
    public function setSpentFuel($spent_fuel)
    {
        $this->container['spent_fuel'] = $spent_fuel;

        return $this;
    }

    /**
     * Gets engine_hours
     *
     * @return int
     */
    public function getEngineHours()
    {
        return $this->container['engine_hours'];
    }

    /**
     * Sets engine_hours
     *
     * @param int $engine_hours engine_hours
     *
     * @return $this
     */
    public function setEngineHours($engine_hours)
    {
        $this->container['engine_hours'] = $engine_hours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


