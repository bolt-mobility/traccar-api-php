<?php
/**
 * Statistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * traccar
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Statistics Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Statistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'capture_time' => '\DateTime',
        'active_users' => 'int',
        'active_devices' => 'int',
        'requests' => 'int',
        'messages_received' => 'int',
        'messages_stored' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'capture_time' => 'date-time',
        'active_users' => null,
        'active_devices' => null,
        'requests' => null,
        'messages_received' => null,
        'messages_stored' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capture_time' => 'captureTime',
        'active_users' => 'activeUsers',
        'active_devices' => 'activeDevices',
        'requests' => 'requests',
        'messages_received' => 'messagesReceived',
        'messages_stored' => 'messagesStored'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capture_time' => 'setCaptureTime',
        'active_users' => 'setActiveUsers',
        'active_devices' => 'setActiveDevices',
        'requests' => 'setRequests',
        'messages_received' => 'setMessagesReceived',
        'messages_stored' => 'setMessagesStored'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capture_time' => 'getCaptureTime',
        'active_users' => 'getActiveUsers',
        'active_devices' => 'getActiveDevices',
        'requests' => 'getRequests',
        'messages_received' => 'getMessagesReceived',
        'messages_stored' => 'getMessagesStored'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['capture_time'] = isset($data['capture_time']) ? $data['capture_time'] : null;
        $this->container['active_users'] = isset($data['active_users']) ? $data['active_users'] : null;
        $this->container['active_devices'] = isset($data['active_devices']) ? $data['active_devices'] : null;
        $this->container['requests'] = isset($data['requests']) ? $data['requests'] : null;
        $this->container['messages_received'] = isset($data['messages_received']) ? $data['messages_received'] : null;
        $this->container['messages_stored'] = isset($data['messages_stored']) ? $data['messages_stored'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capture_time
     *
     * @return \DateTime
     */
    public function getCaptureTime()
    {
        return $this->container['capture_time'];
    }

    /**
     * Sets capture_time
     *
     * @param \DateTime $capture_time in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     *
     * @return $this
     */
    public function setCaptureTime($capture_time)
    {
        $this->container['capture_time'] = $capture_time;

        return $this;
    }

    /**
     * Gets active_users
     *
     * @return int
     */
    public function getActiveUsers()
    {
        return $this->container['active_users'];
    }

    /**
     * Sets active_users
     *
     * @param int $active_users active_users
     *
     * @return $this
     */
    public function setActiveUsers($active_users)
    {
        $this->container['active_users'] = $active_users;

        return $this;
    }

    /**
     * Gets active_devices
     *
     * @return int
     */
    public function getActiveDevices()
    {
        return $this->container['active_devices'];
    }

    /**
     * Sets active_devices
     *
     * @param int $active_devices active_devices
     *
     * @return $this
     */
    public function setActiveDevices($active_devices)
    {
        $this->container['active_devices'] = $active_devices;

        return $this;
    }

    /**
     * Gets requests
     *
     * @return int
     */
    public function getRequests()
    {
        return $this->container['requests'];
    }

    /**
     * Sets requests
     *
     * @param int $requests requests
     *
     * @return $this
     */
    public function setRequests($requests)
    {
        $this->container['requests'] = $requests;

        return $this;
    }

    /**
     * Gets messages_received
     *
     * @return int
     */
    public function getMessagesReceived()
    {
        return $this->container['messages_received'];
    }

    /**
     * Sets messages_received
     *
     * @param int $messages_received messages_received
     *
     * @return $this
     */
    public function setMessagesReceived($messages_received)
    {
        $this->container['messages_received'] = $messages_received;

        return $this;
    }

    /**
     * Gets messages_stored
     *
     * @return int
     */
    public function getMessagesStored()
    {
        return $this->container['messages_stored'];
    }

    /**
     * Sets messages_stored
     *
     * @param int $messages_stored messages_stored
     *
     * @return $this
     */
    public function setMessagesStored($messages_stored)
    {
        $this->container['messages_stored'] = $messages_stored;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


